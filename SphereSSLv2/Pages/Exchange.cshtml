@page
@model SphereSSLv2.Pages.ExchangeModel
@{
    ViewData["Title"] = "Exchange";
}
<div class="container-fluid">
    <div class="d-flex flex-column flex-grow-1">
        <div class="flex-grow-1 ">
            <div class="container text-center ">

                <div class="container-fluid px-4">
                    <div class="row justify-content-center">
                        <div class="col-lg-10 col-md-12 col-sm-12 mb-4">
                            <h3 class="title text-center mb-3">Key Exchange</h3>

                            <div class="card shadow-sm p-4">

                                <ul class="nav nav-tabs mb-4" id="exchangeTab" role="tablist">

                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" id="convertpem-tab" data-bs-toggle="tab" data-bs-target="#convertpem" type="button" role="tab" aria-controls="convertpem" aria-selected="true">Convert PEM</button>
                                    </li>

                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="convertcrtkey-tab" data-bs-toggle="tab" data-bs-target="#convertcrtkey" type="button" role="tab" aria-controls="convertcrtkey" aria-selected="false">Convert CRT & Key</button>
                                    </li>

                                </ul>

                                <div class="tab-content" id="exchangeTabContent">

                                    <!-- Pem  -->
                                    <div class="tab-pane fade show active" id="convertpem" role="tabpanel" aria-labelledby="convertpem-tab">
                                        <div class="card ca-card domain-card mx-auto shadow p-4 mb-4">
                                            <div class="text-center mb-3">
                                                <h4 class="fw-bold mb-1 text-primary">Convert PEM</h4>

                                                <textarea class="form-control mb-3" id="pemInput" rows="7" placeholder="-----BEGIN CERTIFICATE-----"></textarea>
                                                <div class="d-flex align-items-center justify-content-start mb-2">
                                                    <label for="pemFileInput" id="pemFileInputLabel" class="btn btn-outline-primary btn-sm mb-0">Select File</label>
                                                    <input type="file" id="pemFileInput" accept=".pem,.crt,.key,.txt" style="display:none;">
                                                    <span class="text-muted ms-2" style="font-size: 0.98rem;">or drag/drop/paste your CRT here</span>
                                                </div>
                                                <!-- Optional password for PFX output -->
                                                <div class="mb-3">
                                                    <label for="pemPasswordInput" class="form-label">PFX Password <span class="text-muted">(optional)</span></label>
                                                    <input type="password" class="form-control" id="pemPasswordInput" placeholder="Leave blank for none">
                                                </div>

                                                <div class="d-flex justify-content-center mb-3 gap-3">
                                                    <div class="form-check form-check-inline">
                                                        <input class="form-check-input" type="radio" name="pemConvertType" id="pemToPfx" value="pfx" checked>
                                                        <label class="form-check-label" for="pemToPfx">PFX</label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        <input class="form-check-input" type="radio" name="pemConvertType" id="pemToCrtKey" value="crtkey">
                                                        <label class="form-check-label" for="pemToCrtKey">CRT &amp; KEY</label>
                                                    </div>
                                                </div>
                                                <button type="button" class="btn btn-primary" id="convertPemBtn">Convert</button>
                                            </div>
                                        </div>
                                    </div>


                                    <!-- CRT & KEY -->
                                    <div class="tab-pane fade" id="convertcrtkey" role="tabpanel" aria-labelledby="convertcrtkey-tab">
                                        <div class="card ca-card domain-card mx-auto shadow p-4 mb-4">
                                            <div class="text-center mb-3">
                                                <h4 class="fw-bold mb-1 text-primary">Convert CRT &amp; KEY</h4>

                                                <!-- CRT field -->
                                                <label for="crtInput" class="form-label mt-2 mb-0">Paste your CRT contents</label>
                                                <textarea class="form-control mb-2" id="crtInput" rows="4" placeholder="-----BEGIN CERTIFICATE----- ..."></textarea>
                                                <div class="d-flex align-items-center justify-content-end mb-2">
                                                    <label for="crtFileInput" class="btn btn-outline-primary btn-sm mb-0 me-2">Select File</label>
                                                    <input type="file" id="crtFileInput" accept=".pem,.crt,.txt" style="display:none;">
                                                    <span class="text-muted ms-2" style="font-size: 0.98rem;">or drag/drop/paste your CRT here</span>
                                                </div>

                                                <!-- KEY field -->
                                                <label for="keyInput" class="form-label mb-0">Paste your KEY contents</label>
                                                <textarea class="form-control mb-3" id="keyInput" rows="4" placeholder="-----BEGIN PRIVATE KEY----- ..."></textarea>
                                                <div class="d-flex align-items-center justify-content-end mb-2">
                                                    <label for="keyFileInput" class="btn btn-outline-primary btn-sm mb-0 me-2">Select File</label>
                                                    <input type="file" id="keyFileInput" accept=".key,.pem,.txt" style="display:none;">
                                                    <span class="text-muted ms-2" style="font-size: 0.98rem;">or drag/drop/paste your KEY here</span>
                                                </div>

                                                <label for="crtKeyPasswordInput" class="form-label mt-2">PFX Password <span class="text-muted">(optional)</span></label>
                                                <input type="password" class="form-control mb-3" id="crtKeyPasswordInput" placeholder="Leave blank for none">

                                                <div class="d-flex justify-content-center mb-3 gap-3">
                                                    <div class="form-check form-check-inline">
                                                        <input class="form-check-input" type="radio" name="crtKeyConvertType" id="crtKeyToPfx" value="pfx" checked>
                                                        <label class="form-check-label" for="crtKeyToPfx">PFX</label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        <input class="form-check-input" type="radio" name="crtKeyConvertType" id="crtKeyToPem" value="pem">
                                                        <label class="form-check-label" for="crtKeyToPem">PEM</label>
                                                    </div>
                                                </div>
                                                <button type="button" class="btn btn-primary" id="convertCrtKeyBtn">Convert</button>
                                            </div>
                                        </div>
                                    </div>

                                </div>


                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const pemInput = document.getElementById('pemInput');
        const pemFileInput = document.getElementById('pemFileInput');
        const convertBtn = document.getElementById('convertPemBtn');

        // Drag and Drop for PEM textarea
        pemInput.addEventListener('dragover', function (e) {
            e.preventDefault();
            pemInput.classList.add('drag-over');
        });

        pemInput.addEventListener('dragleave', function (e) {
            e.preventDefault();
            pemInput.classList.remove('drag-over');
        });

        pemInput.addEventListener('drop', function (e) {
            e.preventDefault();
            pemInput.classList.remove('drag-over');
            const file = e.dataTransfer.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (event) {
                    pemInput.value = event.target.result;
                };
                reader.readAsText(file);
            }
        });

        // File picker support
        pemFileInput.addEventListener('change', function (e) {
            const file = pemFileInput.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (event) {
                    pemInput.value = event.target.result;
                };
                reader.readAsText(file);
            }
        });

        // Convert button logic
        convertBtn.addEventListener('click', async function () {
            const pemValue = pemInput.value.trim();
            const password = document.getElementById('pemPasswordInput') ? document.getElementById('pemPasswordInput').value : "";
            const outputType = document.querySelector('input[name="pemConvertType"]:checked').value;

            const certMatches = pemValue.match(/-----BEGIN CERTIFICATE-----[^-]+-----END CERTIFICATE-----/gs) || [];
            const privateKeyMatch = pemValue.match(/-----BEGIN (?:RSA )?PRIVATE KEY-----[^-]+-----END (?:RSA )?PRIVATE KEY-----/s);

            const certPem = certMatches.join('\n');
            const keyPem = privateKeyMatch ? privateKeyMatch[0] : "";

            const payload = {
                certPem: certPem,
                keyFile: keyPem,
                outputType: outputType,
                password: password
            };

            const response = await fetch('/Exchange?handler=PemConversion', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                const blob = await response.blob();
                const fileName = outputType === 'pfx' ? "certificate.pfx" : "certificate.zip";
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
                a.remove();
                window.URL.revokeObjectURL(url);
                showToast("Conversion successful!", false);
            } else {
                const errorText = await response.text();
                showToast("Failed: " + errorText, true);
            }
        });
    });
</script>



<script>
        document.addEventListener('DOMContentLoaded', function() {
          // CRT
          const crtInput = document.getElementById('crtInput');
          const crtFileInput = document.getElementById('crtFileInput');
          crtInput.addEventListener('dragover', e => { e.preventDefault(); crtInput.classList.add('drag-over'); });
          crtInput.addEventListener('dragleave', e => { e.preventDefault(); crtInput.classList.remove('drag-over'); });
          crtInput.addEventListener('drop', e => {
              e.preventDefault(); crtInput.classList.remove('drag-over');
              const file = e.dataTransfer.files[0];
              if (file) {
                  const reader = new FileReader();
                  reader.onload = ev => { crtInput.value = ev.target.result; };
                  reader.readAsText(file);
              }
          });
          crtFileInput.addEventListener('change', e => {
              const file = e.target.files[0];
              if (file) {
                  const reader = new FileReader();
                  reader.onload = ev => { crtInput.value = ev.target.result; };
                  reader.readAsText(file);
              }
          });

          // KEY
          const keyInput = document.getElementById('keyInput');
          const keyFileInput = document.getElementById('keyFileInput');
          keyInput.addEventListener('dragover', e => { e.preventDefault(); keyInput.classList.add('drag-over'); });
          keyInput.addEventListener('dragleave', e => { e.preventDefault(); keyInput.classList.remove('drag-over'); });
          keyInput.addEventListener('drop', e => {
              e.preventDefault(); keyInput.classList.remove('drag-over');
              const file = e.dataTransfer.files[0];
              if (file) {
                  const reader = new FileReader();
                  reader.onload = ev => { keyInput.value = ev.target.result; };
                  reader.readAsText(file);
              }
          });
          keyFileInput.addEventListener('change', e => {
              const file = e.target.files[0];
              if (file) {
                  const reader = new FileReader();
                  reader.onload = ev => { keyInput.value = ev.target.result; };
                  reader.readAsText(file);
              }
          });

        // Conversion Button
        document.getElementById('convertCrtKeyBtn').addEventListener('click', async function () {
            const crt = crtInput.value.trim();
            const key = keyInput.value.trim();
            const password = document.getElementById('crtKeyPasswordInput').value;
            const outputType = document.querySelector('input[name="crtKeyConvertType"]:checked').value;

            const payload = {
                certPem: crt,
                keyPem: key,
                password: password,
                outputType: outputType
            };

            const response = await fetch('/Exchange?handler=CrtKeyConversion', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                const blob = await response.blob();
                const fileName = outputType === 'pfx' ? "certificate.pfx" : "certificate.pem";
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
                a.remove();
                window.URL.revokeObjectURL(url);
                showToast("Conversion successful!", false);
            } else {
                const errorText = await response.text();
                showToast("Failed: " + errorText, true);
            }
        });
    });
</script>