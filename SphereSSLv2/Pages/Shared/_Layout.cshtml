<!DOCTYPE html>
<html lang="en" data-bs-theme="light">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="~/img/SphereSSL.ico" />
    <title>@ViewData["Title"] SphereSSL</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

</head>

<body>

    <div class="main-container">

        <div class="top-bar">
           
            <div class="left-side">
                <h2 class="title mb-0 d-flex align-items-center">
                    <span>Sphere</span>
                    <img src="~/img/SphereSSL_ICON.png" asp-append-version="true" class="inline-logo" />
                </h2>
                <div><p class="minititleText">@ViewData["Title"]</p></div>
            </div>


@*             <div class="center-title">
                <h1 class="minititleTag">@ViewData["TitleTag"]</h1>
            </div> *@

           
            <div class="top-bar-icons">
                <div class="css-avatar"></div>
                <button id="power-icon" class="settings-icon btn btn-link p-0" style="border: none;">
                    <i class="bi bi-power"></i>
                </button>
                <a href="/Settings" class="settings-link">
                    <i class="bi bi-gear-fill settings-icon"></i>
                </a>

            </div>
        </div>
        <div class="sidebar-box">
            <nav class="sidebar-nav">
                <a asp-page="/Dashboard" class="sidebar-link">
                    <span class="sidebar-icon"><i class="bi bi-speedometer2"></i></span>
                    <span class="sidebar-text">Home</span>
                </a>
                <a asp-page="/CreateNew" class="sidebar-link">
                    <span class="sidebar-icon"><i class="bi bi-plus-square"></i></span>
                    <span class="sidebar-text">Create</span>
                </a>
                <a asp-page="/ManageRenewals" class="sidebar-link">
                    <span class="sidebar-icon"><i class="bi bi-arrow-repeat"></i></span>
                    <span class="sidebar-text">Manage</span>
                </a>

                <a asp-page="/LearnMore" class="sidebar-link">
                    <span class="sidebar-icon"><i class="bi bi-book-half"></i></span>
                    <span class="sidebar-text">Learn</span>
                </a>
                <a asp-page="/Settings" class="sidebar-link">
                    <span class="sidebar-icon"><i class="bi bi-gear-fill"></i></span>
                    <span class="sidebar-text">Settings</span>
                </a>
            </nav>



        </div>


        <div class="inner-box ">
            @RenderBody()
        </div>

            <footer class="footer-text">
@*                      <div class="left-footer">
                        <h1 class="minititleTag">@ViewData["TitleTag"]</h1>
                    </div> *@
                <div class="row align-items-center">

                        <div class="footer-title">
                            <h2 class="titleFooter mb-0 d-flex align-items-center justify-content-center">
                                <span>Sphere</span>
                                <img src="~/img/SphereSSL_ICON.png" asp-append-version="true" class="inline-logo-footer" />
                            </h2>
                        </div>
                        <p>©2025– Kenneth Lasyone</p>
                
                </div>
            </footer>



    </div>

</body>

</html>

<!-- Power Confirmation Modal -->
<div class="modal fade" id="powerConfirmModal" tabindex="-1" aria-labelledby="powerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content text-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="powerModalLabel">Log Off</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to Log off? 
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmLogOff">Yes, Log Off</button>
            </div>
        </div>
    </div>
</div>

<!-- DNS Challenge Modal-->
<div class="modal fade" id="dnsChallengeModal" tabindex="-1" aria-labelledby="dnsChallengeLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" style="max-width: 650px; min-width: 400px;">
        <div class="modal-content bg-light text-dark shadow-sm">
            <div class="modal-header">
                <h5 class="modal-title" id="dnsChallengeLabel">DNS Challenge</h5>
                <button type="button" class="btn-close position-absolute top-0 end-0 m-3"
                        aria-label="Close" onclick="closeDnsModal()"
                        data-bs-toggle="tooltip" title="Close this window">
                </button>
            </div>
            <div class="modal-body" id="dnsChallengeModalBody">
           
            </div>
        </div>
    </div>
</div>

<!-- DNS Verify Modal-->
<div class="modal fade" id="dnsVerifyModal" tabindex="-1" aria-labelledby="dnsVerifyLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" style="max-width: 650px; min-width: 400px;">
        <div class="modal-content bg-light text-dark shadow-sm">
            <div class="modal-header">
                <h5 class="modal-title" id="dnsVerifyLabel">Verify Challenge</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="VerifyModalBody">
            </div>
            <div class="modal-footer" id="verifyModalFooter">


                <div id="downloadButton" style="display: none;" gap-2">
                    <span class="me-2 text-success fw-semibold">Certificate saved! Download a copy?</span>
                    <button class="btn btn-primary" onclick="window.location.href='/Dashboard?handler=DownloadCertPem&savePath=Temp'">
                        Download PEM
                    </button>
                </div>

                <div id="multiDownloadButtons" style="display: none;" gap-2">
                    <span class="me-2 text-success fw-semibold">Certificates saved! Download copies?</span>
                    <a href="@Url.Page("Dashboard", "DownloadCertKey", new { savePath = "Temp" })" class="btn btn-primary">Download KEY</a>
                    <a href="@Url.Page("Dashboard", "DownloadCertCrt", new { savePath = "Temp" })" class="btn btn-primary">Download CRT</a>

                </div>

                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>

<!-- Cert Record Modal-->
<div class="modal fade" id="certRecordModal" tabindex="-1" aria-labelledby="certRecordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow-sm">
            <div class="modal-header" style="background-color: #042c41; color: white;">
                <h5 class="modal-title" id="certRecordModalLabel">Certificate Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="certRecordModalBody">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add User Modal -->
<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content rounded-3">
            <div class="modal-header">
                <h5 class="modal-title" id="addUserModalLabel">Add User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addUserForm" autocomplete="off">
                <div class="modal-body">
                    <div class="mb-2">
                        <label for="newUsername" class="form-label">Username</label>
                        <input type="text" class="form-control" id="newUsername" required>
                    </div>
                    <div class="mb-2">
                        <label for="newPassword" class="form-label">Password</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="newPassword" required autocomplete="new-password">
                            <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                <i class="bi bi-eye" id="togglePasswordIcon"></i>
                            </button>
                        </div>
                    </div>
                    <div class="mb-2">
                        <label for="newName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="newName">
                    </div>
                    <div class="mb-2">
                        <label for="newEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="newEmail">
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Role</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="role" id="roleViewer" value="Viewer" required>
                            <label class="form-check-label" for="roleViewer">Viewer</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="role" id="roleUser" value="User">
                            <label class="form-check-label" for="roleUser">User</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="role" id="roleAdmin" value="Admin">
                            <label class="form-check-label" for="roleAdmin">Admin</label>
                        </div>
                    </div>
                    <div class="mb-2">
                        <label for="newNotes" class="form-label">Notes</label>
                        <textarea class="form-control" id="newNotes" rows="2"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Add User</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View User Modal -->
<div class="modal fade" id="viewUserModal" tabindex="-1" aria-labelledby="viewUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content rounded-3">
            <div class="modal-header">
                <h5 class="modal-title" id="viewUserModalLabel">View User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="viewUserForm" autocomplete="off">
                <div class="modal-body">
                    <!-- All fields filled in dynamically by JS -->
                    <div class="row g-2 mb-3">
                        <div class="col-md-6">
                            <label class="form-label">User ID</label>
                            <input type="text" class="form-control" id="vuUserId" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">UUID</label>
                            <input type="text" class="form-control" id="vuUUID" readonly>
                        </div>
                    </div>
                    <div class="row g-2 mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Username</label>
                            <input type="text" class="form-control" id="vuUsername" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Password Hash</label>
                            <input type="text" class="form-control" id="vuPasswordHash" readonly>
                        </div>
                    </div>
                    <div class="row g-2 mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" id="vuName" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" id="vuEmail" readonly>
                        </div>
                    </div>
                    <div class="row g-2 mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Role</label>
                            <input type="text" class="form-control" id="vuRole" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Notes</label>
                            <textarea class="form-control" id="vuNotes" rows="1" readonly></textarea>
                        </div>
                    </div>
                    <hr>
                    <div id="userStatsSection">
                        <h6>User Stats</h6>
                        <div>Total Certs: <span id="vuTotalCerts"></span></div>
                        <div>Certs Renewed: <span id="vuCertsRenewed"></span></div>
                        <div>Certs Failed: <span id="vuCertsFailed"></span></div>
                        <div>Last Cert Created: <span id="vuLastCertCreated"></span></div>
                    </div>
                    <hr>
                    <div id="apiKeySection">
                        <h6>API Key</h6>
                        <div>API Key: <span id="vuApiKey"></span></div>
                        <div>Created: <span id="vuApiCreated"></span></div>
                        <div>Last Used: <span id="vuApiLastUsed"></span></div>
                        <div>Revoked: <span id="vuApiRevoked"></span></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="editUserBtn" style="display:none;">Edit</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- CSS styles-->
<style>
    .main-container {
        height: 100%;
        max-width: 100vw;
        background: linear-gradient(100deg, #14083b 60%, #17395d );
        display: flex;
        align-items: center;
        justify-content: center;
        flex-wrap: nowrap;

    }

    .inner-box {
        background-image: repeating-linear-gradient(45deg, rgba(255,255,255,0.015) 0, rgba(255,255,255,0.015) 1px, transparent 1px, transparent 10px);
        background: linear-gradient(90deg, #0f1a2b, #0b71a7 99%);
        background-blend-mode: overlay;
        transition: background 0.3s ease;
        width: 100%;
        height: 80vh; 
        overflow-y: auto;
        overflow-x: hidden;
        border-top-left-radius: 60px;
        border-bottom-left-radius: 60px;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        box-shadow: inset 8px 0 15px rgba(0, 0, 0, 0.25);
        padding: 20px;
        box-sizing: border-box;
    }
    
</style>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/signalr@6.0.0/dist/browser/signalr.min.js"></script>

<!-- PowerIcon Listener -->
<script>
    document.getElementById("power-icon").addEventListener("click", function () {
        const modal = new bootstrap.Modal(document.getElementById("powerConfirmModal"));
        modal.show();
    });

    document.getElementById("confirmLogOff").addEventListener("click", async function () {
        try {
            const response = await fetch("?handler=LogOff", { 
                method: "POST"
            });

            if (response.ok) {
                window.location = "/Index";
            } else {
                showToast("Failed to log off the server.", true);
            }
        } catch (err) {
            console.error(err);
             showToast("An error occurred while trying to log off.", true);
        }
    });
</script>


<!-- Toggle Single File Download Button -->
<script>
    let certDownloadReady = false;

    function tryShowDownloadButton() {
        const downloadSection = document.getElementById("downloadButton");
        if (certDownloadReady && downloadSection) {
            downloadSection.style.display = "block";

            const overlay = document.getElementById("waitingModalOverlay");
            if (overlay) overlay.remove();

            const startButton = document.getElementById("startButton");
            if (startButton) {
                startButton.disabled = false;
                startButton.hidden = false;
            }
        }
    }

    // DOM listener
    const observer = new MutationObserver(() => {
        if (certDownloadReady) {
            tryShowDownloadButton();
        }
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

</script>


<!-- Toggle Multi File Download Buttons -->
<script>
    let certDownloadsReady = false;

    function tryShowDownloadButtons() {
        const downloadSections = document.getElementById("multiDownloadButtons");
        if (certDownloadsReady && downloadSections) {
            downloadSections.style.display = "block"; // <-- fixed!

            const overlay = document.getElementById("waitingModalOverlay");
            if (overlay) overlay.remove();

            const startButton = document.getElementById("startButton");
            if (startButton) {
                startButton.disabled = false;
                startButton.hidden = false;
            }
        }
    }

    // DOM listener
    const observer2 = new MutationObserver(() => {
        if (certDownloadsReady) {
            tryShowDownloadButtons();
        }
    });

    observer2.observe(document.body, {
        childList: true,
        subtree: true
    });

</script>


<!--Toast-->
<script>
    function showToast(message, isError = false) {
        const toast = document.createElement("div");
        toast.textContent = message;
        toast.style.position = "fixed";
        toast.style.bottom = "20px";
        toast.style.left = "50%";
        toast.style.transform = "translateX(-50%)";
        toast.style.background = isError ? "#dc3545" : "#198754"; // Red or green
        toast.style.color = "#fff";
        toast.style.padding = "10px 20px";
        toast.style.borderRadius = "8px";
        toast.style.boxShadow = "0 0 10px rgba(0,0,0,0.2)";
        toast.style.zIndex = 9999;
        toast.style.transition = "opacity 0.4s ease";
        toast.style.opacity = "1";
        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.opacity = "0";
            setTimeout(() => toast.remove(), 400);
        }, 2500);
    }</script>


<!--Auto Select Save on Select AutoRenew-->
<script>
    var autoRenew = document.getElementById("autoRenew");
    if (autoRenew) {
        autoRenew.addEventListener("change", function () {
            const autoRenewVal = this.checked;
            const saveForRenewal = document.getElementById("saveForRenewal");

            if (autoRenewVal && saveForRenewal && !saveForRenewal.checked) {
                saveForRenewal.checked = true;
            }
        });
    }
</script>

<!--Show/Hide Add User Password-->
<script>

        document.getElementById('togglePassword').addEventListener('click', function () {
        const pwInput = document.getElementById('newPassword');
        const icon = document.getElementById('togglePasswordIcon');
        if (pwInput.type === 'password') {
            pwInput.type = 'text';
            icon.classList.remove('bi-eye');
            icon.classList.add('bi-eye-slash');
        } else {
            pwInput.type = 'password';
            icon.classList.remove('bi-eye-slash');
            icon.classList.add('bi-eye');
        }
    });

</script>



<script>
        
    document.getElementById('addUserForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const userDto = {
            Username: document.getElementById('newUsername').value.trim(),
            Password: document.getElementById('newPassword').value,
            Name: document.getElementById('newName').value.trim(),
            Email: document.getElementById('newEmail').value.trim(),
            Role: document.querySelector('input[name="role"]:checked').value,
            Notes: document.getElementById('newNotes').value.trim()
        };

        const response = await fetch('/Settings?handler=AddUser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(userDto)
        });

           if (response.redirected) {
            window.location = response.url;
        } else if (response.ok) {
            bootstrap.Modal.getInstance(document.getElementById('addUserModal')).hide();
            showToast('User added successfully!'); 
            setTimeout(() => location.reload(), 800); // Give a moment for the toast to show or call a function to refresh the list without reload
        } else {
            showToast('Error adding user: ' + (await response.text()), true); 
        }
    });

        </script>