<!DOCTYPE html>
<html lang="en" data-bs-theme="light">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="~/img/SphereSSL.ico" />
    <title>@ViewData["Title"] SphereSSL</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

</head>

<body>

    <div class="main-container">

        <div class="top-bar">
           
            <div class="left-side">
                <h2 class="title mb-0 d-flex align-items-center">
                    <span>Sphere</span>
                    <img src="~/img/SphereSSL_ICON.png" asp-append-version="true" class="inline-logo" />
                </h2>
            </div>


            <div class="center-title">
                <h1 class="titleText">@ViewData["Title"]</h1>
            </div>

           
            <div class="top-bar-icons">
                <div class="css-avatar"></div>
                <button id="power-icon" class="settings-icon btn btn-link p-0" style="border: none;">
                    <i class="bi bi-power"></i>
                </button>
                <a href="/Settings" class="settings-link">
                    <i class="bi bi-gear-fill settings-icon"></i>
                </a>
            </div>
        </div>

        <div class="sidebar-box">
            <nav class="sidebar-nav">
                <a asp-page="/Dashboard" class="sidebar-link">
                    <span class="sidebar-icon"><i class="bi bi-speedometer2"></i></span>
                    <span class="sidebar-text">Home</span>
                </a>
                <a asp-page="/CreateNew" class="sidebar-link">
                    <span class="sidebar-icon"><i class="bi bi-plus-square"></i></span>
                    <span class="sidebar-text">Create</span>
                </a>
                <a asp-page="/ManageRenewals" class="sidebar-link">
                    <span class="sidebar-icon"><i class="bi bi-arrow-repeat"></i></span>
                    <span class="sidebar-text">Manage</span>
                </a>

                <a asp-page="/LearnMore" class="sidebar-link">
                    <span class="sidebar-icon"><i class="bi bi-book-half"></i></span>
                    <span class="sidebar-text">Learn</span>
                </a>
                <a asp-page="/Settings" class="sidebar-link">
                    <span class="sidebar-icon"><i class="bi bi-gear-fill"></i></span>
                    <span class="sidebar-text">Settings</span>
                </a>
            </nav>
        </div>

        <div class="inner-box ">
            @RenderBody()
        </div>


        <footer class="footer-text">
            <div class="footer-title">
                <h2 class="titleFooter mb-0 d-flex align-items-center justify-content-center">
                    <span>Sphere</span>
                    <img src="~/img/SphereSSL_ICON.png" asp-append-version="true" class="inline-logo-footer" />
                </h2>
            </div>
            <p>©2025– Kenneth Lasyone</p>
        </footer>


    </div>



</body>
</html>

<!-- Power Confirmation Modal -->
<div class="modal fade" id="powerConfirmModal" tabindex="-1" aria-labelledby="powerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content text-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="powerModalLabel">Restart Server</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to restart the server? This will temporarily interrupt all active sessions.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmRestart">Yes, Restart</button>
            </div>
        </div>
    </div>
</div>

<!-- DNS Challenge Modal-->
<div class="modal fade" id="dnsChallengeModal" tabindex="-1" aria-labelledby="dnsChallengeLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" style="max-width: 650px; min-width: 400px;">
        <div class="modal-content bg-light text-dark shadow-sm">
            <div class="modal-header">
                <h5 class="modal-title" id="dnsChallengeLabel">DNS Challenge</h5>
                <button type="button" class="btn-close position-absolute top-0 end-0 m-3"
                        aria-label="Close" onclick="closeDnsModal()"
                        data-bs-toggle="tooltip" title="Close this window">
                </button>
            </div>
            <div class="modal-body" id="dnsChallengeModalBody">
           
            </div>
        </div>
    </div>
</div>

<!-- DNS Verify Modal-->
<div class="modal fade" id="dnsVerifyModal" tabindex="-1" aria-labelledby="dnsVerifyLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" style="max-width: 650px; min-width: 400px;">
        <div class="modal-content bg-light text-dark shadow-sm">
            <div class="modal-header">
                <h5 class="modal-title" id="dnsVerifyLabel">Verify Challenge</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="VerifyModalBody">
            </div>
            <div class="modal-footer" id="verifyModalFooter">


                <div id="downloadButton" style="display: none;" gap-2">
                    <span class="me-2 text-success fw-semibold">Certificate saved! Download a copy?</span>
                    <button class="btn btn-primary" onclick="window.location.href='/Dashboard?handler=DownloadCertPem&savePath=Temp'">
                        Download PEM
                    </button>
                </div>

                <div id="downloadButtons" style="display: none;" gap-2">
                    <span class="me-2 text-success fw-semibold">Certificate saved! Download a copy?</span>
                    <a href="@Url.Page("Dashboard", "DownloadCertKey", new { savePath = "Temp" })" class="btn btn-primary">Download KEY</a>
                    <a href="@Url.Page("Dashboard", "DownloadCertCrt", new { savePath = "Temp" })" class="btn btn-primary">Download CRT</a>

                </div>

                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>

<!-- Cert Record Modal-->
<div class="modal fade" id="certRecordModal" tabindex="-1" aria-labelledby="certRecordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow-sm">
            <div class="modal-header" style="background-color: #042c41; color: white;">
                <h5 class="modal-title" id="certRecordModalLabel">Certificate Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="certRecordModalBody">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<!-- CSS styles-->
<style>
    .main-container {
        height: 100%;
        max-width: 100vw;
        background: linear-gradient(100deg, #14083b 60%, #17395d );
        display: flex;
        align-items: center;
        justify-content: center;
        flex-wrap: nowrap;

    }

    .inner-box {
        background-image: repeating-linear-gradient(45deg, rgba(255,255,255,0.015) 0, rgba(255,255,255,0.015) 1px, transparent 1px, transparent 10px);
        background: linear-gradient(90deg, #0f1a2b, #0b71a7 99%);
        background-blend-mode: overlay;
        transition: background 0.3s ease;
        width: 100%;
        height: 80vh; /* changed from 80% to 80vh for viewport-based sizing */
        overflow-y: auto; /* added */
        overflow-x: hidden;
        border-top-left-radius: 60px;
        border-bottom-left-radius: 60px;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        box-shadow: inset 8px 0 15px rgba(0, 0, 0, 0.25);
        padding: 20px;
        box-sizing: border-box;
    }
    
</style>




<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/signalr@6.0.0/dist/browser/signalr.min.js"></script>


<!-- PowerIcon Listener -->
<script>
    document.getElementById("power-icon").addEventListener("click", function () {
        const modal = new bootstrap.Modal(document.getElementById("powerConfirmModal"));
        modal.show();
    });

    document.getElementById("confirmRestart").addEventListener("click", async function () {
        try {
            const response = await fetch("/Server/Restart", {
                method: "POST"
            });

            if (response.ok) {
                alert("Server restart initiated!");
                location.reload(); // optional
            } else {
                alert("Failed to restart the server.");
            }
        } catch (err) {
            console.error(err);
            alert("An error occurred while trying to restart.");
        }
    });
</script>


<!-- starting Signal listener -->
<script>
    console.log("Starting Signal listener:");
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/logHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    connection.on("UpdateLog", msg => {
         console.log("Received UpdateLog:", msg)
        appendToLog(msg, "update");


          if (msg.includes("Certificate stored successfully!")) {
            certDownloadReady = true;
            console.log("Certificate download ready:", certDownloadReady);
            tryShowDownloadButton(); 
        }


        if (msg.includes("Certificates stored successfully!")) {
            certDownloadsReady = true;
             console.log("Certificates download ready:", certDownloadsReady);
            tryShowDownloadButtons(); 
        }

    });

    connection.on("InfoLog", msg => {
        console.log("Received InfoLog:", msg);
        appendToLog(msg, "info");


    });

    connection.on("DebugLog", msg => {
        console.debug("Received DebugLog:", msg);
        appendToLog(msg, "debug");
    });

    connection.start()
        .then(() => {
            console.log("SignalR connection successfully established!");
        })
        .catch(err => {
            console.error("SignalR connection failed: ", err);
        });
        window.signalHub = connection;

</script>


<!-- append Signal Log -->
<script>
    function appendToLog(text, level) {
          console.log("Signal Line Heard:");
        const logLine = document.createElement("div");
        logLine.textContent = text;
        logLine.className = `log-line ${level}`;

        const container = document.getElementById("signalLogOutput");

        if (!container) {
            setTimeout(() => appendToLog(text, level), 100); // Try again
            return;
        }

        container.appendChild(logLine);
        container.scrollTop = container.scrollHeight;

        console.log("Appending log to:", container); 
    }
</script>


<!-- Toggle Single File Download Button -->
<script>
    let certDownloadReady = false;

    function tryShowDownloadButton() {
        const downloadSection = document.getElementById("downloadButton");
        if (certDownloadReady && downloadSection) {
            downloadSection.style.display = "block";

            const overlay = document.getElementById("waitingModalOverlay");
            if (overlay) overlay.remove();

            const startButton = document.getElementById("startButton");
            if (startButton) {
                startButton.disabled = false;
                startButton.hidden = false;
            }
        }
    }

    // DOM listener
    const observer = new MutationObserver(() => {
        if (certDownloadReady) {
            tryShowDownloadButton();
        }
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });



</script>


<!-- Toggle Multi File Download Buttons -->
<script>
    let certDownloadsReady = false;

    function tryShowDownloadButtons() {
        const downloadSections = document.getElementById("downloadButtons");
        if (certDownloadsReady && downloadSections) {
            downloadSection.style.display = "block";

             const overlay = document.getElementById("waitingModalOverlay");
            if (overlay) overlay.remove();

            const startButton = document.getElementById("startButton");
            if (startButton) {
                startButton.disabled = false;
                startButton.hidden = false;
            }
        }
    }

    // DOM listener
    const observer = new MutationObserver(() => {
        if (certDownloadsReady) {
            tryShowDownloadButtons();
        }
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

</script>


<!--Toast-->
<script>
    function showToast(message, isError = false) {
        const toast = document.createElement("div");
        toast.textContent = message;
        toast.style.position = "fixed";
        toast.style.bottom = "20px";
        toast.style.left = "50%";
        toast.style.transform = "translateX(-50%)";
        toast.style.background = isError ? "#dc3545" : "#198754"; // Red or green
        toast.style.color = "#fff";
        toast.style.padding = "10px 20px";
        toast.style.borderRadius = "8px";
        toast.style.boxShadow = "0 0 10px rgba(0,0,0,0.2)";
        toast.style.zIndex = 9999;
        toast.style.transition = "opacity 0.4s ease";
        toast.style.opacity = "1";
        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.opacity = "0";
            setTimeout(() => toast.remove(), 400);
        }, 2500);
    }</script>


<!--Auto Select Save on Select AutoRenew-->
<script>
    document.getElementById("autoRenew").addEventListener("change", function () {
        const autoRenew = this.checked;
        const saveForRenewal = document.getElementById("saveForRenewal");

        if (autoRenew && !saveForRenewal.checked) {
            saveForRenewal.checked = true;
        }
    });
</script>



