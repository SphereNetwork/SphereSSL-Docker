@page
@model SphereSSLv2.Pages.DashboardModel

}@{
    ViewData["Title"] = "Dashboard";
}
<div class="container-fluid">
    <div class="d-flex flex-column flex-grow-1">
        <div class="flex-grow-1 ">
            <div class="container text-center ">

                <div class="container-fluid px-4">
                    <div class="row">

                        <!-- Quick Create -->
                        <div class="col-lg-4 mb-4">
                            <h3 class="title mb-4">Quick Create</h3>
                            <div class="card quick-create shadow-sm cert-form p-4">
                                <form onsubmit="event.preventDefault(); submitOrder();">
                                    <h5>Email Address</h5>
                                    <input type="email" id="email" name="email" class="form-control mb-3" placeholder="you@example.com" required />

                                    <h5>Domain Address</h5>
                                    <input type="text" id="domain" name="domain" class="form-control mb-3" placeholder="example.com" required />

                                    <div class="d-flex justify-content-between align-items-center mb-3 cert-format-options">
                                        <div class="format-option text-center">
                                            <input type="radio" name="certFormat" value="false" id="useSingleFile" />
                                            <label for="useSingleFile">
                                                <strong>Single File</strong><br>
                                                <span class="format-subtext">.pem</span>
                                            </label>
                                        </div>
                                        <div class="format-option text-center">
                                            <input type="radio" name="certFormat" value="true" id="useSeparateFiles" />
                                            <label for="useSeparateFiles">
                                                <strong>Separate Files</strong><br>
                                                <span class="format-subtext">.crt and .key</span>
                                            </label>
                                        </div>
                                    </div>

                                    <h5>Save Path</h5>
                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" placeholder="C:/path/to/save" id="savePath" />
                                        <button class="btn btn-outline-secondary" type="button" id="browseBtn">Browse</button>
                                    </div>

                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="autoAddRecord" onchange="toggleProviderDropdown()" />
                                        <label class="form-check-label" for="autoAddRecord">
                                            Auto add DNS Record
                                        </label>
                                    </div>
                                    <div class="mb-3" id="providerDropdownContainer" style="display: none;">
                                        <label for="dnsProvider" class="form-label">DNS Provider</label>

                                        <div class="d-flex gap-2">
                                            <select class="form-select" id="dnsProvider" name="dnsProvider" style="flex: 1;">
                                                @foreach (var provider in Model.DNSProviders)
                                                {
                                                    <option value="@provider.ProviderName">@provider.ProviderName</option>
                                                }
                                            </select>

                                            <button class="btn btn-outline-secondary" onclick="showAddProviderModal()" type="button" id="browseBtn">Add</button>
                                        </div>
                                    </div>

                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="saveForRenewal" />
                                        <label class="form-check-label" for="saveForRenewal">
                                            Save Order
                                        </label>
                                    </div>

                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" id="autoRenew" />
                                        <label class="form-check-label" for="autoRenew">
                                            Auto Renew (DNS via API)
                                        </label>
                                    </div>

                                    <button type="submit" class="btn-glow w-40">Start</button>
                                </form>

                            </div>
                        </div>

                        <!-- Upcoming Renewals -->
                        <div class="col-lg-6 mb-4">
                            <h3 class="title mb-4">Upcoming Renewals</h3>
                            <div class="card renewals shadow-sm p-3 " style="  min-width: 600px; min-height: 535px; max-height: 600px; overflow-y: hidden;">




                                <div class="d-flex align-items-center" px-3 mb-2 fw-bold text-secondary small">
                                    <span style="width: 42%;"> Domain</span>
                                    <span style="width: 13%;">Expires In</span>
                                    <span style="width: 32%;">Provider</span>
                                    <span style="width: 10%;">Auto Renew</span>
                                </div>

                                <div class="list-group overflow-auto" style=" height: 100%; overflow-y: scroll;">
                                    @if (Model.ExpiringSoonRecords != null && Model.ExpiringSoonRecords.Any())
                                    {


                                        foreach (var record in Model.ExpiringSoonRecords)
                                        {


                                            var ExpiresIn = $"{(record.ExpiryDate - DateTime.UtcNow).TotalDays:N0} days";
                                            <div class="card mb-2 shadow-sm"
                                                 role="button"
                                                 onclick="showCertRecordModal('@record.OrderId')"
                                                 style="cursor: pointer; width: 100%;">
                                                <div class="card-body d-flex align-items-center justify-content-between" style="max-height: 1px;">
                                                    <div class="renewal-row">
                                                        <a href="https://@record.Domain"
                                                           target="_blank"
                                                           title="Go to @record.Domain"
                                                           class="fw-semibold text-primary text-decoration-underline domain-link">
                                                            @record.Domain
                                                        </a>

                                                        <span class="text-dark expires-in">@ExpiresIn</span>
                                                        <span class="text-muted provider">@record.Provider</span>
                                                        <span class="text-center auto-renew">
                                                            <i class="bi @(record.autoRenew ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger")"></i>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="list-group-item disabled text-muted">No Certs found.</div>
                                    }
                                </div>


                            </div>
                        </div>

                        <!-- Helpful Links -->
                        <div class="col-lg-2 mb-4">
                            <h3 class="title mb-4" style="  min-width: 250px; ">Helpful Links</h3>
                            <div class="card useful-links shadow-sm p-3" style="  min-width: 250px; ">
                                <a href="https://www.cloudflare.com/" target="_blank">
                                    <img src="https://www.cloudflare.com/favicon.ico" alt="Cloudflare" class="link-icon" />
                                    <span>Cloudflare</span>
                                </a>
                                <a href="https://letsencrypt.org/" target="_blank">
                                    <img src="https://letsencrypt.org/favicon.ico" alt="Let's Encrypt" class="link-icon" />
                                    <span>Let's Encrypt</span>
                                </a>
                                <a href="https://www.namecheap.com/" target="_blank">
                                    <img src="https://www.namecheap.com/favicon.ico" alt="NameCheap" class="link-icon" />
                                    <span>NameCheap</span>
                                </a>
                                <a href="https://www.certbot.com/" target="_blank">
                                    <img src="https://www.certbot.com/favicon.ico" alt="CertBot" class="link-icon" />
                                    <span>CertBot</span>
                                </a>
                                <a href="https://github.com/kl3mta3/SphereSSLv2" target="_blank">
                                    <img src="https://github.com/favicon.ico" alt="GitHub" class="link-icon" />
                                    <span>GitHub</span>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>


            </div>
        </div>

    </div>

</div>

<style>

    .log-line {
        font-family: monospace;
        padding: 2px 4px;
        border-bottom: 1px solid #eee;
    }


    .card {
        border-radius: 15px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        padding: 20px;
        background-color: #ffffff;
        backdrop-filter: blur(10px); /* subtle blur effect */
    }

        .card h3 {
            color: #343a40;
        }

        .card p {
            color: #6c757d;
        }

        .card.useful-links {
            margin: 0 auto;
        }

        .card.renewals {
            max-width: 700px;
            padding: 25px 50px; 
            border-radius: 12px;
            background-color: white;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
            margin: 0 auto;
            text-align: center;
        }

        .card.quick-create{
            max-width: 400px;
            padding: 25px 50px; 
            border-radius: 12px;
            background-color: white;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
            margin: 0 auto;
            text-align: center;
        }

        .card.mb-2:hover {
            transform: scale(1.01);
            background: #f3faff;
            box-shadow: 0 6px 18px rgba(0, 123, 255, 0.25);
            transition: all 0.2s ease-in-out;
            border: 1px solid rgba(0, 123, 255, 0.4);
            cursor: pointer;
        }


    .useful-links {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        border-radius: 12px;
        background-color: #fff;
        text-align: center;
    }

        .useful-links a {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 8px 12px;
            margin: 4px 0;
            text-decoration: none;
            color: #0b71a7;
            font-weight: 600;
            transition: background 0.2s, transform 0.2s;
            border-radius: 8px;
            width: 100%;
            max-width: 240px;
        }

            .useful-links a:hover {
                background: #f3faff;
                transform: scale(1.02);
                transition: all 0.2s ease-in-out;
            }

    .link-icon {
        width: 20px;
        height: 20px;
    }

    .link-icon {
        width: 20px;
        height: 20px;
        border-radius: 4px;
    }

    .resource-link {
        background: linear-gradient(145deg, #0b71a7, #0f1a2b);
        color: white;
        padding: 12px 16px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        margin: 6px 0;
        display: flex;
        align-items: center;
        gap: 10px;
        text-decoration: none;
        font-weight: 600;
        transition: transform 0.2s ease;
    }

        .resource-link:hover {
            transform: scale(1.03);
        }




    .cert-form {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px, 40px;
        border-radius: 20px;
        border: 1px solid #0b2950;
        text-align: center;
    }

        .cert-form h5 {
            font-weight: bold;
            margin-bottom: 8px;
        }

        .cert-form input[type="radio"] {
            margin-top: 5px;
            accent-color: #0b71a7;
        }



    .btn-glow {
        background: linear-gradient(to right, #007bff, #00c6ff); 
        border: none;
        border-radius: 12px;
        color: white;
        padding: 8px 16px;
        font-weight: 600;
        font-size: 0.9rem;
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.4);
        transition: all 0.2s ease-in-out;
    }

        .btn-glow:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 123, 255, 0.5);
            background: linear-gradient(to right, #0056d2, #0098e5);
        }

        .btn-glow:active {
            transform: translateY(1px);
            box-shadow: 0 3px 8px rgba(0, 123, 255, 0.3);
        }


    .cert-format-options input[type="radio"] {
        margin-bottom: 6px;
        transform: scale(1.1);
        accent-color: #007bff;
    }

    .cert-format-options label {
        display: block;
        cursor: pointer;
        font-size: 0.9rem;
        color: #333;
    }

    .format-subtext {
        font-size: 0.75rem;
        color: #666;
        font-style: italic;
    }

    .list-group {
        overflow-y: scroll;
        overflow-x: visible;
        padding-top: 10px;
        padding-left: 5px;
        padding-right: 5px;

    }

    .card.mb-2 .renewal-row {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center; 
        gap: 8px;
        text-align: center;
    }

    .domain-link {
        flex: 3 1 auto;
        white-space: nowrap;
        overflow: hidden;
        text-align: left;
        font-weight: 600;
        text-overflow: ellipsis;

    }

    .expires-in {
        flex: 3 1 auto;
        white-space: nowrap;
        text-align: center;
        margin-left: 25px;
        margin-right: 0px;
        font-weight: 600;

    }

    .provider {
        flex: 3 1 auto;
        white-space: nowrap;
        text-align: left;
        margin-left: 35px;
        margin-right: 0px;

        font-weight: 600;

    }

    .auto-renew {
        flex: 0 0 10px;
        text-align: center;
    
    }


    .form-check-input {
        accent-color: #05131d; 
        transform: scale(1.2); 
        margin-right: 8px;
        cursor: pointer;
    }

    .form-check-label {
        text-align: left !important;
        font-size: 0.9rem;
        font-weight: 600;
        color: #333;
        cursor: pointer;
    }

    .form-check {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        margin-bottom: 0.75rem;
        text-align: left;
    }

    .domain-link {
        display: inline !important;
        padding: 0 !important;
        margin: 0 !important;
        white-space: nowrap;
        max-width: max-content;
    }


</style>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

@* Open Path location Window via task app *@

<script>
    function toggleProviderDropdown() {
        const checkbox = document.getElementById('autoAddRecord');
        const container = document.getElementById('providerDropdownContainer');
        if (checkbox.checked) {
            container.style.display = 'block';
        } else {
            container.style.display = 'none';
        }
    }
</script>

<script>
document.getElementById('browseBtn').addEventListener('click', async () => {
    const res = await fetch('/select-folder');
    const path = await res.text();
    if (path) {
        document.getElementById('savePath').value = path; 
    }
});
</script>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll('.no-modal-link').forEach(link => {
            link.addEventListener('click', e => {
                // prevents the card's onclick from triggering when clicking the link
                e.stopImmediatePropagation();
            });
        });
    });
</script>

@* Submit Quick Create *@
<script>
      async function submitOrder() {
        const selectedFormat = document.querySelector('input[name="certFormat"]:checked');
        const useSeparateFiles = selectedFormat ? selectedFormat.value === "true" : false;
        let currentOrder = null;
        let order = {
            orderId: "",
            domain: document.getElementById("domain").value,
            email: document.getElementById("email").value,
            dnsChallengeToken: "",
            savePath: document.getElementById("savePath").value,
            creationTime: "",
            useSeparateFiles: useSeparateFiles,
            saveForRenewal: document.getElementById("saveForRenewal").checked,
            autoRenew: document.getElementById("autoRenew").checked
        };
            let provider = document.getElementById("dnsProvider")?.value || "";
            let autoAdd = document.getElementById("autoAddRecord")?.checked || false;

        console.log("Order Object Created:", order);
        currentOrder= order;
      const request = {
      order: order,
      provider: provider,
      autoAdd: autoAdd
    };


        const response = await fetch("/Dashboard?handler=QuickCreate", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(request)
        });

           if (!response.ok) {
        const errorText = await response.text();
        console.error("QuickCreate failed:", errorText);
        alert("Failed to create order: " + errorText);
        return;
        }   

        const updatedOrder = await response.json();
        console.log("Updated Order Received:", updatedOrder);
         currentOrder =updatedOrder;
        const modalResponse = await fetch(`/Dashboard?handler=ShowChallangeModal`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(updatedOrder)  // Send the corrected object
        });

        const modalHtml = await modalResponse.text();
        document.getElementById("dnsChallengeModalBody").innerHTML = modalHtml;
        const modal = new bootstrap.Modal(document.getElementById("dnsChallengeModal"));
        modal.show();
    }
</script>

<script>
    function copyDnsToken(button) {
        const token = document.getElementById("dnsToken").innerText;
        navigator.clipboard.writeText(token).then(() => {
            const icon = button.querySelector('i');
            icon.classList.remove("bi-clipboard");
            icon.classList.add("bi-clipboard-check");

            setTimeout(() => {
                icon.classList.remove("bi-clipboard-check");
                icon.classList.add("bi-clipboard");
            }, 1500);
        }).catch(err => {
            alert("Failed to copy token.");
            console.error(err);
        });
    }
</script>


<script>
    function copyDNSName(button) {
        const token = document.getElementById("domainName").innerText;
        navigator.clipboard.writeText(token).then(() => {
            const icon = button.querySelector('i');
            icon.classList.remove("bi-clipboard");
            icon.classList.add("bi-clipboard-check");

            setTimeout(() => {
                icon.classList.remove("bi-clipboard-check");
                icon.classList.add("bi-clipboard");
            }, 1500);
        }).catch(err => {
            alert("Failed to copy token.");
            console.error(err);
        });
    }
</script>


<script>
    function showCertRecordModal(orderId) {
        const modalBody = document.getElementById("certRecordModalBody");
        modalBody.innerHTML = `<div class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>`;

        fetch(`/Dashboard?handler=ExpiringRecordModal&orderId=${encodeURIComponent(orderId)}`)
            .then(res => res.text())
            .then(html => {
                modalBody.innerHTML = html;
                const modal = new bootstrap.Modal(document.getElementById('certRecordModal'));
                modal.show();
            })
            .catch(err => {
                modalBody.innerHTML = `<p class="text-danger">Failed to load record.</p>`;
                console.error(err);
            });
    }
</script>

<script>
    async function showAddProviderModal() {
      const response = await fetch('/Dashboard?handler=ShowAddProviderModal', {
        method: 'POST'
      });

      const html = await response.text();
      document.getElementById('dnsChallengeModalBody').innerHTML = html;
      const modal = new bootstrap.Modal(document.getElementById('dnsChallengeModal'));
      modal.show();
    }

    async function submitNewProvider() {
      const provider = {
        providerName: document.getElementById('providerName').value,
        provider: document.getElementById('provider').value,
        apiKey: document.getElementById('apiKey').value,
        ttl: parseInt(document.getElementById('ttl').value)
      };

      const response = await fetch('/Dashboard?handler=AddDNSProvider', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(provider)
      });

      if (response.ok) {
        alert("Provider added successfully!");
        bootstrap.Modal.getInstance(document.getElementById('dnsChallengeModal')).hide();
      } else {
        const err = await response.text();
        alert("Failed to add provider: " + err);
      }
    }
</script>

<script>
    async function verifyChallange() {
    const order = {
        orderId: document.getElementById("orderId")?.value || "",
        domain: document.getElementById("domainName")?.textContent.trim() || "",
        dnsChallengeToken: document.getElementById("dnsToken")?.textContent.trim() || "",
        email: document.getElementById("email")?.value || "",
        useSeparateFiles: false,
        saveForRenewal: false,
        autoRenew: false,
        savePath: document.getElementById("savePath")?.value || ""
    };

        const response = await fetch("/Dashboard?handler=ShowVerifyModal", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(order)
        });

        const modalHtml = await response.text();
        document.getElementById("VerifyModalBody").innerHTML = modalHtml;


            const prevModal = bootstrap.Modal.getInstance(document.getElementById("dnsChallengeModal"));
            if (prevModal) {
                prevModal.hide();
            }

        const modal = new bootstrap.Modal(document.getElementById("dnsVerifyModal"));
        certDownloadReady = false;
        certDownloadsReady = false;

        const downloadPem = document.getElementById("downloadButton");
        if (downloadPem) downloadPem.style.display = "none";

        const downloadBoth = document.getElementById("downloadButtons");
        if (downloadBoth) downloadBoth.style.display = "none";

        modal.show();
    }</script>





<script>
       function closeDnsModal() {
        const modalEl = document.getElementById("dnsChallengeModal");
        const modal = bootstrap.Modal.getInstance(modalEl);
        if (modal) {
            modal.hide();
        }
    }
</script>